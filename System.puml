@startuml

skinparam linetype ortho
skinparam ranksep 200

package web.customexceptions #LightBlue/LightGoldenRodYellow {
    class InvalidStatusException {
        + <<Create>> InvalidStatusException(message: String)
        + <<Create>> InvalidStatusException(message: String, cause: Throwable)
    }
    class DocumentAlreadySignedException {
        + <<Create>> DocumentAlreadySignedException(message: String)
        + <<Create>> DocumentAlreadySignedException(message: String, cause: Throwable)
    }
    class ConsentRequiredException {
        + <<Create>> ConsentRequiredException(message: String)
        + <<Create>> ConsentRequiredException(message: String, cause: Throwable)
    }
    class StorageException {
        + <<Create>> StorageException(message: String)
        + <<Create>> StorageException(message: String, cause: Throwable)
    }
    class InvalidOTPException {
        + <<Create>> InvalidOTPException(message: String)
        + <<Create>> InvalidOTPException(message: String, cause: Throwable)
    }
    class EntityNotFoundException {
        + <<Create>> EntityNotFoundException(clazz: Class, searchParamsMap: String[1..*])
        - {static} String generateMessage(entity: String, searchParams: Map<String,String>)
        - {static} Map<K,V> toMap(keyType: Class<K>, valueType: Class<V>, entries: Object[1..*])
    }
    class CustomFileNotFoundException {
        + <<Create>> CustomFileNotFoundException(message: String)
        + <<Create>> CustomFileNotFoundException(message: String, cause: Throwable)
    }
    class SigningSessionSuspendedException {
        + <<Create>> SigningSessionSuspendedException(message: String)
        + <<Create>> SigningSessionSuspendedException(message: String, cause: Throwable)
    }
}


package web.error #LightBlue/LightGoldenRodYellow {
    class ApiError {
        - HttpStatus status
        - LocalDateTime timestamp
        - String message
        - String debugMessage
        - <<Create>> ApiError()
        + <<Create>> ApiError(status: HttpStatus)
        + <<Create>> ApiError(status: HttpStatus, ex: Throwable)
        + <<Create>> ApiError(status: HttpStatus, message: String, ex: Throwable)
        - void addSubError(subError: ApiSubError)
        - void addValidationError(object: String, field: String, rejectedValue: Object, message: String)
        - void addValidationError(object: String, message: String)
        - void addValidationError(fieldError: FieldError)
        + void addValidationErrors(fieldErrors: List<FieldError>)
        - void addValidationError(objectError: ObjectError)
        + void addValidationError(globalErrors: List<ObjectError>)
        - void addValidationError(cv: ConstraintViolation<?>)
        + void addValidationErrors(constraintViolations: Set<ConstraintViolation<?>>)
    }
    class RestExceptionHandler {
        - String maxFileSize
        # ResponseEntity<Object> handleMissingServletRequestParameter(ex: MissingServletRequestParameterException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleHttpMediaTypeNotSupported(ex: HttpMediaTypeNotSupportedException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleMethodArgumentNotValid(ex: MethodArgumentNotValidException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleBindException(ex: BindException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        + ResponseEntity<ApiError> handleConstraintViolation(ex: javax.validation.ConstraintViolationException)
        + ResponseEntity<ApiError> handleEntityNotFound(ex: EntityNotFoundException)
        + ResponseEntity<ApiError> handleEntityNotFound(ex: javax.persistence.EntityNotFoundException)
        # ResponseEntity<Object> handleHttpMessageNotReadable(ex: HttpMessageNotReadableException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        + ResponseEntity<ApiError> handleDataIntegrityViolation(ex: DataIntegrityViolationException, request: WebRequest)
        # ResponseEntity<Object> handleHttpMessageNotWritable(ex: HttpMessageNotWritableException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleNoHandlerFoundException(ex: NoHandlerFoundException,headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleHttpRequestMethodNotSupported(ex: HttpRequestMethodNotSupportedException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        + ResponseEntity<ApiError> handleMethodArgumentTypeMismatch(ex: MethodArgumentTypeMismatchException, request: WebRequest)
        # ResponseEntity<Object> handleMissingServletRequestPart(ex: MissingServletRequestPartException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        # ResponseEntity<Object> handleMissingPathVariable(ex: MissingPathVariableException, headers: HttpHeaders, status: HttpStatus, request: WebRequest)
        + ResponseEntity<ApiError> handleInvalidPathException(ex: InvalidPathException)
        + ResponseEntity<ApiError> handleMaxUploadSizeExceeded(ex: MaxUploadSizeExceededException)
        + ResponseEntity<ApiError> handleStorageException(ex: StorageException)
        + ResponseEntity<ApiError> handleCustomFileNotFoundException(ex: CustomFileNotFoundException)
        + ResponseEntity<ApiError> handleInvalidOTPException(ex: InvalidOTPException)
        + ResponseEntity<ApiError> handleInvalidStatusException(ex: InvalidStatusException)
        + ResponseEntity<ApiError> handleConsentRequiredException(ex: ConsentRequiredException)
        + ResponseEntity<ApiError> handleSigningSessionSuspendedException(ex: SigningSessionSuspendedException)
        + ResponseEntity<ApiError> handleDocumentAlreadySignedException(ex: DocumentAlreadySignedException)
    }
    abstract class ApiSubError {
    }
    class ApiValidationError {
        - String object
        - String field
        - Object rejectedValue
        - String message
        ~ <<Create>> ApiValidationError(object: String, message: String)
    }
}

package service.storage #LightBlue/LightGoldenRodYellow {
    interface IStorageService {
        ~ Path store(file: MultipartFile)
        ~ Resource loadAsResource(fileName: String, signed: boolean)
        ~ Path load(fileName: String)
    }
    class StorageProperties {
        - String uploadDir
        - String downloadDir
    }
    class StorageServiceImpl {
        - Path uploadPath
        - Path downloadLocation
        + <<Create>> StorageServiceImpl(storageProperties: StorageProperties)
        + Path store(file: MultipartFile)
        + Resource loadAsResource(fileName: String, signed: boolean)
        + Path load(fileName: String)
    }
}

package web.controller #LightBlue/LightGoldenRodYellow {
    class SigningSessionsController {
        + ResponseEntity<SigningSessionResponse> initiateSigningSession(file: MultipartFile, principal: Jwt)
        + ResponseEntity<SigningSessionResponse> cancelSigningSession(signingSessionId: UUID)
        + ResponseEntity<SigningSessionResponse> approveSigningSession(signingSessionId: UUID, request: ApproveSigningSessionRequest, principal: Jwt)
        + ResponseEntity<SigningSessionResponse> resendOtp(signingSessionId: UUID, principal: Jwt)
        + ResponseEntity<SigningSessionResponse> sign(signingSessionId: UUID, signRequest: SignRequest, principal: Jwt, httpServletRequest: HttpServletRequest)
        + ResponseEntity<Resource> getUnsignedDocument(signingSessionId: UUID)
        + ResponseEntity<Resource> getSignedDocument(signingSessionId: UUID)
        + ResponseEntity<SigningSessionsResponse> getSigningSessions(principal: Jwt)
        + ResponseEntity<SigningSessionResponse> getSigningSession(signingSessionId: UUID)
    }
}

package response #LightBlue/LightGoldenRodYellow {
    class SigningSessionResponse {
        - UUID id
        - UUID userId
        - int otpAttempts
        - int signAttempts
        - Long suspendedUntil
        - Boolean consent
        - Status status
    }
    class DocumentResponse {
        - UUID id
        - String fileName
        - Long addedOn
        - String signedFileName
    }
    class SigningSessionsResponse {
    }
}

package service.email #LightBlue/LightGoldenRodYellow {
    class EmailServiceImpl {
        - {static} String NOREPLY_ADDRESS
        - JavaMailSender emailSender
        - ITemplateEngine thymeleafTemplateEngine
        + void sendRegistrationEmail(principal: Jwt, code: String)
        + void sendSigningEmail(principalClaims: Map<String,Object>, code: String)
    }
    interface IEmailService {
        ~ void sendRegistrationEmail(principal: Jwt, code: String)
        ~ void sendSigningEmail(principalClaims: Map<String,Object>, code: String)
    }
}


package persistence.repository #LightBlue/LightGoldenRodYellow {
    interface ISigningSessionRepository {
        ~ List<SigningSession> findByUserId(userId: UUID)
    }
}


package service.location #LightBlue/LightGoldenRodYellow {
    class GeoIPLocationService {
        - DatabaseReader dbReaderCity
        + <<Create>> GeoIPLocationService()
        + GeoIP getLocation(ip: String)
    }
    class GeoIP {
        - String ipAddress
        - String city
        - String country
        - String latitude
        - String longitude
        + <<Create>> GeoIP()
        + <<Create>> GeoIP(ipAddress: String)
        + <<Create>> GeoIP(ipAddress: String, city: String, country: String, latitude: String, longitude: String)
    }
    class HttpUtils {
        - {static} String[1..*] IP_HEADERS
        + {static} String getRequestIPAddress(request: HttpServletRequest)
        - <<Create>> HttpUtils()
    }
}

package service.signing.test #LightBlue/LightGoldenRodYellow {
    class SignerAuthenticityTest {
        - String givenName
        - String familyName
        - String signatureFieldName
        - String certSubjectName
        - Path fileToBeSignedPath
        - String reason
        - String contact
        - String clientIp
        ~ SignatureUtil util
        ~ PdfDocument pdfDocument
        ~ Map<String,Object> principalClaims
        ~ void setUp()
        ~ void tearDown()
        ~ void rejectDifferentPrincipal()
        ~ void acceptValidPrincipal()
    }

    class IrrefutabilityTest {
        - String givenName
        - String familyName
        - String signatureFieldName
        - String certSubjectName
        - Path fileToBeSignedPath
        - String reason
        - String contact
        - String clientIp
        ~ SignatureUtil util
        ~ PdfDocument pdfDocument
        ~ void setUp()
        ~ void tearDown()
        ~ void sessionFieldsUpdated()
        ~ void testSignedDocumentFieldsAndApproved()
    }

    class SigningServiceIntegrityTest {
        - String givenName
        - String familyName
        - String signatureFieldName
        - String certSubjectName
        - Path fileToBeSignedPath
        - String reason
        - String location
        - String contact
        - String clientIp
        ~ SignatureUtil util
        ~ PdfDocument pdfDocument
        ~ void setUp()
        ~ void tearDown()
        ~ void signatureField()
        ~ void signature()
        ~ void signatureValidityAndDataIntegrity()
        ~ void signatureDataIntegrityManual()
        ~ void fieldsMatch()
    }

}

package service.signing #LightBlue/LightGoldenRodYellow {
    class SigningService {
        ~ String BASE_DEST
        ~ String STORE_PATH
        ~ char[1..*] STORE_PASS
        ~ char[1..*] KEY_PASS
        + <<Create>> SigningService(signingProperties: SigningProperties, storageService: IStorageService, locationService: GeoIPLocationService)
        - {static} String getFileChecksum(digest: MessageDigest, file: File)
        + Path sign(signingSession: SigningSession, clientIp: String, principalClaims: Map<String,Object>)
        - String prepareLocation(clientIp: String)
        - String prepareReason(signingSession: SigningSession, principalClaims: Map<String,Object>)
    }
    class SigningProperties {
        - String storePass
        - String keyPass
    }
}

package persistence.model #LightBlue/LightGoldenRodYellow {
    class SigningSession {
        - UUID id
        - UUID userId
        - int otpAttempts
        - int signAttempts
        - Long suspendedUntil
        - Boolean consent
        - Status status
        + <<Create>> SigningSession(id: UUID)
    }
    class StatusConverter {
        + String convertToDatabaseColumn(status: Status)
        + Status convertToEntityAttribute(code: String)
    }
    class OneTimePassword {
        - UUID id
        - Long timestamp
        - String otp
        - String secret
    }
    class Document {
        - UUID id
        - String filePath
        - String fileName
        - Long addedOn
        - String signedFilePath
        - String signedFileName
    }
    enum Status {
        +  SIGNED
        +  PENDING
        +  IN_PROGRESS
        +  CANCELED
        +  REJECTED
        - <<Create>> Status(statusString: String)
        - String statusString
        + String getStatusString()
    }
}

package config #LightBlue/LightGoldenRodYellow {
    class SecurityConfig {
        # void configure(http: HttpSecurity)
        ~ JwtDecoder jwtDecoder(properties: OAuth2ResourceServerProperties)
    }
    class OrganizationSubClaimAdapter {
        - MappedJwtClaimSetConverter delegate
        + Map<String,Object> convert(claims: Map<String,Object>)
    }
}

package service.totp #LightBlue/LightGoldenRodYellow {
    class TotpService {
        - CodeGenerator codeGenerator
        - CodeVerifier codeVerifier
        + <<Create>> TotpService()
        + OneTimePassword getCodeObject()
        + OneTimePassword getCodeObject(timestamp: long, secret: String)
        + boolean verifyCode(secret: String, code: String)
    }

}

package service.sms #LightBlue/LightGoldenRodYellow {
    class SmsServiceImpl {
        ~ String sid
        ~ String token
        + <<Create>> SmsServiceImpl(smsProperties: SmsProperties)
        + void sendSigningSms(principalClaims: Map<String,Object>, code: String)
    }
    interface ISmsService {
        ~ void sendSigningSms(principalClaims: Map<String,Object>, code: String)
    }
    class SmsProperties {
        - String TWILIO_ACCOUNT_SID
        - String TWILIO_AUTH_TOKEN
    }
}

package web.validation #LightBlue/LightGoldenRodYellow {
    class FileValidator {
        + void initialize(FileConstraint)
        + boolean isValid(MultipartFile,ConstraintValidatorContext)
        - boolean isSupportedContentType(contentType: String)
    }
    interface FileConstraint {
        + String message
        ~ Class[1,*] groups()
        ~ Class[1,*] payload()
    }
}

package web.mapper #LightBlue/LightGoldenRodYellow {
    class Mapper {
        + SigningSessionResponse toSigningSessionResponse(signingSession: SigningSession)
        + SigningSessionsResponse toSigningSessionsResponse(signingSessions: List<SigningSession>)
        - SigningSessionResponse createSigningSessionResponse(signingSession: SigningSession)
    }
}

package request #LightBlue/LightGoldenRodYellow {
    class ApproveSigningSessionRequest {
        - Boolean consent
    }
    class SignRequest {
        - String otp
    }
}

package service.signingSession #LightBlue/LightGoldenRodYellow {
    class SigningSessionServiceImpl {
        - {static} String PATTERN_FORMAT
        + {static} String HashWithBouncyCastle(final originalString: String)
        + SigningSession findById(id: UUID)
        + SigningSession save(signingSession: SigningSession)
        + List<SigningSession> findByUserId(userId: UUID)
        + SigningSession initiateSigningSession(file: MultipartFile, principalClaims: Map<String,Object>)
        + SigningSession cancelSigningSession(signingSession: SigningSession)
        + SigningSession approveSigningSession(signingSession: SigningSession, consent: Boolean, principalClaims: Map<String,Object>)
        + SigningSession resendOtp(signingSession: SigningSession, principalClaims: Map<String,Object>)
        + void addSigningAttempt(signingSession: SigningSession)
        + void rejectSigning(signingSession: SigningSession)
        - SigningSession generateAndSendOtp(signingSession: SigningSession, otpAttempts: int, principalClaims: Map<String,Object>)
        + SigningSession sign(signingSession: SigningSession, otp: String, clientIp: String, principalClaims: Map<String,Object>)
        + Resource getUnsignedDocument(signingSession: SigningSession)
        + Resource getSignedDocument(signingSession: SigningSession)
    }
    interface ISigningSessionService {
        ~ SigningSession findById(id: UUID)
        ~ SigningSession save(signingSession: SigningSession)
        ~ List<SigningSession> findByUserId(userId: UUID)
        ~ SigningSession initiateSigningSession(file: MultipartFile, principalClaims: Map<String,Object>)
        ~ SigningSession cancelSigningSession(signingSession: SigningSession)
        ~ SigningSession approveSigningSession(signingSession: SigningSession, consent: Boolean, principalClaims: Map<String,Object>)
        ~ SigningSession resendOtp(signingSession: SigningSession, principalClaims: Map<String,Object>)
        ~ void addSigningAttempt(signingSession: SigningSession)
        ~ void rejectSigning(signingSession: SigningSession)
        ~ SigningSession sign(signingSession: SigningSession, otp: String, clientIp: String, principalClaims: Map<String,Object>)
        ~ Resource getUnsignedDocument(signingSession: SigningSession)
        ~ Resource getSignedDocument(signingSession: SigningSession)
    }
    class Hidden{
    }
    SigningSessionServiceImpl <|--Hidden
    hide Hidden
}

RuntimeException <|-- EntityNotFoundException
RuntimeException <|-- CustomFileNotFoundException
RuntimeException <|-- SigningSessionSuspendedException
RuntimeException <|-- InvalidOTPException
RuntimeException <|-- StorageException
RuntimeException <|-- ConsentRequiredException
RuntimeException <|-- DocumentAlreadySignedException
RuntimeException <|-- InvalidStatusException

ApiError "1" --> "1..*" ApiSubError
ApiSubError <|-- ApiValidationError
org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler <|-- RestExceptionHandler

IStorageService <|.. StorageServiceImpl

SigningSessionsController "1" --> "1" Mapper
SigningSessionsController "1" --> "1" ISigningSessionService
SigningSessionsController "1" --> "1" ISmsService

SigningSessionResponse "1" --> "1" DocumentResponse
SigningSessionsResponse "1" --> "1..*" SigningSessionResponse

IEmailService <|.. EmailServiceImpl

org.springframework.data.jpa.repository.JpaRepository <|-- ISigningSessionRepository

SignerAuthenticityTest "1" --> "1" SigningService
SignerAuthenticityTest "1" --> "1" SigningProperties
SignerAuthenticityTest "1" --> "1" ISigningSessionRepository
SignerAuthenticityTest "1" --> "1" IStorageService
SignerAuthenticityTest "1" --> "1" GeoIPLocationService
SignerAuthenticityTest "1" --> "1" IEmailService
SignerAuthenticityTest "1" --> "1" TotpService
SignerAuthenticityTest "1" --> "1" SigningSession
SignerAuthenticityTest "1" --> "1" ISmsService
SignerAuthenticityTest "1" --> "1" SigningSessionServiceImpl

SigningServiceIntegrityTest "1" --> "1" SigningService
SigningServiceIntegrityTest "1" --> "1" SigningProperties
SigningServiceIntegrityTest "1" --> "1" IStorageService
SigningServiceIntegrityTest "1" --> "1" GeoIPLocationService

IrrefutabilityTest "1" --> "1" SigningProperties
IrrefutabilityTest "1" --> "1" ISigningSessionRepository
IrrefutabilityTest "1" --> "1" IStorageService
IrrefutabilityTest "1" --> "1" SigningService
IrrefutabilityTest "1" --> "1" GeoIPLocationService
IrrefutabilityTest "1" --> "1" IEmailService
IrrefutabilityTest "1" --> "1" TotpService
IrrefutabilityTest "1" --> "1" SigningSession
IrrefutabilityTest "1" --> "1" ISmsService

SigningService "1" --> "1" IStorageService
SigningService "1" --> "1" GeoIPLocationService

Document "1" --> "1" SigningSession
SigningSession "1" --> "1" Document
OneTimePassword "1" --> "1" SigningSession
SigningSession "1" --> "1" OneTimePassword
javax.persistence.AttributeConverter <|.. StatusConverter

org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter <|-- SecurityConfig
org.springframework.core.convert.converter.Converter <|.. OrganizationSubClaimAdapter

ISmsService <|.. SmsServiceImpl

javax.validation.ConstraintValidator <|.. FileValidator

java.io.Serializable <|.. ApproveSigningSessionRequest
java.io.Serializable <|.. SignRequest

ISigningSessionService <|.. SigningSessionServiceImpl
SigningSessionServiceImpl "1" --> "1" ISmsService
SigningSessionServiceImpl "1" --> "1" IEmailService
SigningSessionServiceImpl "1" --> "1" ISigningSessionRepository
SigningSessionServiceImpl "1" --> "1" TotpService
SigningSessionServiceImpl "1" --> "1" GeoIPLocationService
SigningSessionServiceImpl "1" --> "1" IStorageService
SigningSessionServiceImpl "1" --> "1" SigningService


@enduml